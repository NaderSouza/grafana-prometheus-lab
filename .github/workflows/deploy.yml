name: AWS Pipeline

on:
  push:
    branches:
      - feature/test

jobs:
  tf-run:
    name: Terraform run on AWS
    runs-on: ubuntu-latest

    steps:
      # Step 01 - Checkout do Código
      - name: Step 01 - Checkout GitHub Repo
        uses: actions/checkout@v3

      # Step 02 - Configurar Credenciais AWS
      - name: Step 02 - Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 03 - Instalar Terraform
      - name: Step 03 - Terraform Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 04 - Debug Terraform Directory
      - name: Step 04 - Debug Terraform Directory
        run: |
          pwd
          ls -la
          ls -la terraform/

      # Step 05 - Remover estado local (evita conflitos de estado corrompido)
      - name: Step 05 - Clean Terraform State
        run: rm -rf terraform/.terraform terraform/.terraform.lock.hcl terraform/terraform.tfstate

      # Step 06 - Inicializar Terraform
      - name: Step 06 - Terraform Init
        run: terraform -chdir=./terraform/ init -input=false -reconfigure -upgrade
        env:
          TF_LOG: DEBUG

      # Step 11 - Verificar Recursos Antes do Destroy
      - name: Step 11 - List Terraform Resources
        run: terraform -chdir=./terraform/ state list

      # Step 12 - Planejar Destruição
      - name: Step 12 - Terraform Plan (Destroy)
        run: terraform -chdir=./terraform/ plan -destroy -input=false

      # Step 13 - Destruir Terraform
      - name: Step 13 - Terraform Destroy
        run: terraform -chdir=./terraform/ destroy -auto-approve -input=false

      # Step 14 - Remover Estado Local Apenas Após a Destruição
      - name: Step 14 - Clean Terraform State
        run: rm -rf terraform/.terraform terraform/.terraform.lock.hcl terraform/terraform.tfstate
